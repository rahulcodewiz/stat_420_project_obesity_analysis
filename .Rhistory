plot_diagnostics=function (model){
par(mfrow = c(1, 2))
title=paste("Data from model: \n",summary(model)$call[2], summary(model)$call[3])
plot(fitted(model), resid(model),pch = 20,  cex.main=1,cex.lab=1,xlab = "Fitted", ylab = "Residuals", main=title)
abline(h = 0, lty = 2, col = lcol, lwd = 2)
qqnorm(resid(obs_mod), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(obs_mod), col = "dodgerblue", lwd = 2)
}
plot_diagnostics(obs_mod)
plot_diagnostics=function (model){
par(mfrow = c(1, 2))
title=paste("Data from model: \n",summary(model)$call[2], summary(model)$call[3])
plot(fitted(model), resid(model),pch = 20,  cex.main=1,cex.lab=1,xlab = "Fitted", ylab = "Residuals", main=title)
abline(h = 0, lty = 2, lwd = 2)
qqnorm(resid(obs_mod), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(obs_mod), col = "dodgerblue", lwd = 2)
}
plot_diagnostics(obs_mod)
hist(resid(obs_mod),
xlab   = "Residuals",
main   = "Histogram of Residuals, fit_1",
col    = "darkorange",
border = "dodgerblue",
breaks = 20)
plot_diagnostics=function (model){
par(mfrow = c(2, 2))
title=paste("Data from model: \n",summary(model)$call[2], summary(model)$call[3])
plot(fitted(model), resid(model),pch = 20,  cex.main=1,cex.lab=1,xlab = "Fitted", ylab = "Residuals", main=title)
abline(h = 0, lty = 2, lwd = 2)
qqnorm(resid(obs_mod), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(obs_mod), col = "dodgerblue", lwd = 2)
hist(resid(obs_mod),
xlab   = "Residuals",
main   = "Histogram of Residuals",
col    = "darkorange",
border = "dodgerblue",
breaks = 20)
}
plot_diagnostics(obs_mod)
options(scipen = 1, digits = 4, width = 80, fig.align = "center")
knitr::opts_chunk$set(echo = TRUE)
library(RWeka)
library(knitr)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(hrbrthemes)
obesity=read.arff("data/Obesity.arff");
obesity$NCP=as.factor(as.integer(obesity$NCP))
dim(obesity)
summary(obesity)
pairs(obesity)
str(obesity)
obesity=obesity%>%mutate(ageBins = cut(Age, breaks = seq(0,100,by=10)))
p1=ggplot(obesity, aes(fill=Gender, y=Age, x=ageBins)) +
geom_bar(position="dodge", stat="identity")
p2=ggplot(obesity, aes(fill=MTRANS,y=Age, x=ageBins)) +
geom_bar(position="stack", stat="identity") +
scale_fill_viridis(discrete = T) +
theme_ipsum() +
xlab("")+
ylab("count")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggarrange(p1,p2,nrow=2,ncol=1)
p1 = ggboxplot(obesity, x = "family_history_with_overweight", y = "Weight",
color = "family_history_with_overweight", palette = "jco")
p2 = ggboxplot(obesity, x = "Gender", y = "Weight",
color = "Gender", palette = "jco")
p3=ggboxplot(obesity, x = "MTRANS", y = "Weight",
color = "MTRANS", palette = "jco")
p4=ggboxplot(obesity, x = "FAVC", y = "Weight",
color = "FAVC", palette = "jco")+
xlab("FAVC")
p5=ggboxplot(obesity, x = "NCP", y = "Weight",
color = "NCP", palette = "jco")+
xlab("NCP")
p6=ggboxplot(obesity, x = "CAEC", y = "Weight",
color = "CAEC", palette = "jco")+
xlab("CAEC")
p7=ggboxplot(obesity, x = "SMOKE", y = "Weight",
color = "SMOKE", palette = "jco")+
xlab("SMOKE")
ggarrange(p1,p2,p3,nrow=3,ncol=1)
ggarrange(p4,p5,p6,p7,nrow=2,ncol=2)
p1=ggplot(data = obesity) +
geom_point(mapping = aes(x = Height, y = Weight,color=Gender))
p2=ggplot(data = obesity) +
geom_point(mapping = aes(x = Weight, y = Age,color=Gender))
p3=ggplot(data = obesity) +
geom_point(mapping = aes(x = Height, y = Age,color=Gender))
ggarrange(p1,p2,p3,nrow=3,ncol=1)
p1=ggplot(data = obesity) +
geom_point(mapping = aes(x = Height, y = Weight,color=NCP))
p2=ggplot(data = obesity) +
geom_point(mapping = aes(x = Height, y = Weight,color=SMOKE))
p3=ggplot(data = obesity) +
geom_point(mapping = aes(x = Height, y = Weight,color=FAVC))
p4=ggplot(data = obesity) +
geom_point(mapping = aes(x = Height, y = Weight,color=MTRANS))
ggarrange(p1,p2,p3,p4,nrow=4,ncol=1)
ggboxplot(obesity, x = "SCC", y = "Weight",
color = "SCC", palette = "jco")
obs_mod=lm(Weight~.,data=obesity)
summary(obs_mod)
sum(cooks.distance(obs_mod)>4/nrow(obs_mod))
summary(obs_mod)
summary(obs_mod)$r2
summary(obs_mod)$rsquared
summary(obs_mod)$r.squared
smry=summary(model)
smry=summary(obs_mod)
list(r2=smry$r.squared,
)
smry$adj.r.squared
list(r2=smry$r.squared,adjr2=smry$adj.r.squared
)
library(lmtest)
bptest(obs_mod)
bptest(obs_mod)$pvalue
bptest(obs_mod)$p-value
bptest(obs_mod)$p_value
bptest(obs_mod)$p.value
shapiro.test(obs_mod)
shapiro.test(resid(obs_mod))
shapiro.test(resid(obs_mod))$p.value
options(scipen = 1, digits = 4, width = 80, fig.align = "center")
knitr::opts_chunk$set(echo = TRUE)
library(RWeka)
library(knitr)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(hrbrthemes)
library(lmtest)
plot_diagnostics=function (model){
par(mfrow = c(2, 2))
title=paste("Data from model: \n",summary(model)$call[2], summary(model)$call[3])
plot(fitted(model), resid(model),pch = 20,  cex.main=1,cex.lab=1,xlab = "Fitted", ylab = "Residuals", main=title)
abline(h = 0, lty = 2, lwd = 2)
qqnorm(resid(obs_mod), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(obs_mod), col = "dodgerblue", lwd = 2)
hist(resid(obs_mod),
xlab   = "Residuals",
main   = "Histogram of Residuals",
col    = "darkorange",
border = "dodgerblue",
breaks = 20)
}
mod_performance=function(obs_mod,obs_tst,obs_trn){
smry=summary(obs_mod)
#Train RMSE
trn_rmse=sqrt(mean(resid(obs_mod)^2))
pred=predict(obs_mod,newdata=obs_tst)
#Train RMSE
tst_rmse=sqrt(mean((obs_tst$Weight-pred)^2))
list(r2=smry$r.squared
,adjr2=smry$adj.r.squared
,bptest=bptest(obs_mod)$p.value
,sptest=shapiro.test(resid(obs_mod))$p.value,
trn_rmse=trn_rmse,tst_rmse=tst_rmse)
}
plot_diagnostics=function (model){
par(mfrow = c(2, 2))
title=paste("Data from model: \n",summary(model)$call[2], summary(model)$call[3])
plot(fitted(model), resid(model),pch = 20,  cex.main=1,cex.lab=1,xlab = "Fitted", ylab = "Residuals", main=title)
abline(h = 0, lty = 2, lwd = 2)
qqnorm(resid(obs_mod), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(obs_mod), col = "dodgerblue", lwd = 2)
hist(resid(obs_mod),
xlab   = "Residuals",
main   = "Histogram of Residuals",
col    = "darkorange",
border = "dodgerblue",
breaks = 20)
}
mod_performance=function(obs_mod,obs_tst,obs_trn){
smry=summary(obs_mod)
#Train RMSE
trn_rmse=sqrt(mean(resid(obs_mod)^2))
pred=predict(obs_mod,newdata=obs_tst)
#Train RMSE
tst_rmse=sqrt(mean((obs_tst$Weight-pred)^2))
list(r2=smry$r.squared
,adjr2=smry$adj.r.squared
,bptest=bptest(obs_mod)$p.value
,sptest=shapiro.test(resid(obs_mod))$p.value,
trn_rmse=trn_rmse,tst_rmse=tst_rmse)
}
set.seed(04082021)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(mtcars))
## set the seed to make your partition reproducible
trn_ind <- sample(seq_len(nrow(obesity)), size = smp_size)
obs_trn <- mtcars[trn_ind, ]
obs_test <- mtcars[-trn_ind, ]
obs_mod=lm(Weight~.,data=obs_trn)
set.seed(04082021)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(mtcars))
## set the seed to make your partition reproducible
trn_ind <- sample(seq_len(nrow(obesity)), size = smp_size)
obs_trn <- mtcars[trn_ind, ]
obs_test <- mtcars[-trn_ind, ]
obs_mod=lm(Weight~.,data=obs_trn)
obs_trn
set.seed(04082021)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(obesity))
## set the seed to make your partition reproducible
trn_ind <- sample(seq_len(nrow(obesity)), size = smp_size)
obs_trn <- mtcars[trn_ind, ]
obs_test <- mtcars[-trn_ind, ]
obs_mod=lm(Weight~.,data=obs_trn)
set.seed(04082021)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(obesity))
## set the seed to make your partition reproducible
trn_ind <- sample(seq_len(nrow(obesity)), size = smp_size)
obs_trn <- obesity[trn_ind, ]
obs_test <- obesity[-trn_ind, ]
obs_mod=lm(Weight~.,data=obs_trn)
summary(obs_mod)
plot_diagnostics=function (model){
par(mfrow = c(2, 2))
title=paste("Data from model: \n",summary(model)$call[2], summary(model)$call[3])
plot(fitted(model), resid(model),pch = 20,  cex.main=1,cex.lab=1,xlab = "Fitted", ylab = "Residuals", main=title)
abline(h = 0, lty = 2, lwd = 2)
qqnorm(resid(obs_mod), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(obs_mod), col = "dodgerblue", lwd = 2)
hist(resid(obs_mod),
xlab   = "Residuals",
main   = "Histogram of Residuals",
col    = "darkorange",
border = "dodgerblue",
breaks = 20)
}
mod_performance=function(obs_mod,obs_tst,obs_trn){
smry=summary(obs_mod)
#Train RMSE
trn_rmse=sqrt(mean(resid(obs_mod)^2))
pred=predict(obs_mod,newdata=obs_tst)
#Train RMSE
tst_rmse=sqrt(mean((obs_tst$Weight-pred)^2))
list(r2=smry$r.squared
,adjr2=smry$adj.r.squared,
trn_rmse=trn_rmse,tst_rmse=tst_rmse,
bptest=bptest(obs_mod)$p.value
,sptest=shapiro.test(resid(obs_mod))$p.value)
}
mod_performance(obs_mod,obs_tst = obs_tst,obs_trn)
mod_performance(obs_mod,obs_tst = obs_test,obs_trn)
plot_diagnostics(obs_mod)
plot_diagnostics(obs_mod)
mod_performance(obs_mod,obs_tst = obs_test,obs_trn)
library(knitr)
options(scipen = 1, digits = 4, width = 80, fig.align = "center")
knitr::opts_chunk$set(echo = TRUE)
library(RWeka)
library(knitr)
library(ggplot2)
library(ggpubr)
library(dplyr)
library(viridis)
library(hrbrthemes)
library(lmtest)
library(knitr)
plot_diagnostics(obs_mod)
perf=mod_performance(obs_mod,obs_tst = obs_test,obs_trn)
kable(perf)
(perf=mod_performance(obs_mod,obs_tst = obs_test,obs_trn))
do.call(rbind.data.frame, perf)
kable(perf)
data.frame(perf)
kable(data.frame(perf))
plot_diagnostics(obs_mod)
perf_mat=mod_performance(obs_mod,obs_tst = obs_test,obs_trn)
kable(data.frame(perf))
sum(cooks.distance(obs_mod)>4/nrow(obs_mod))
htval=hatvalues(obs_mod)
sum(htval > 2 * mean(htval))
library(lmtest)
bptest(obs_mod)
htval=hatvalues(obs_mod)
obs_mod=lm(Weight~.,data=obs_trn,subset =htval > 2 * mean(htval) )
plot_diagnostics(obs_mod)
perf_mat=mod_performance(obs_mod,obs_tst = obs_test,obs_trn)
htval=hatvalues(obs_mod)
obs_mod=lm(Weight~.,data=obs_trn,subset =htval > 2 * mean(htval) )
plot_diagnostics(obs_mod)
htval=hatvalues(obs_mod)
obs_mod=lm(Weight~.,data=obs_trn,subset =htval < 2 * mean(htval) )
plot_diagnostics(obs_mod)
sum(cooks.distance(obs_mod)>4/nrow(obs_mod))
sum(cooks.distance(obs_mod)>4/nrow(obs_mod))
bptest(obs_mod)
shapiro.test(resid(obs_mod))
obesity=read.arff("data/Obesity.arff");
obesity$NCP=as.factor(as.integer(obesity$NCP))
dim(obesity)
plot_diagnostics=function (model){
par(mfrow = c(2, 2))
title=paste("Data from model: \n",summary(model)$call[2], summary(model)$call[3])
plot(fitted(model), resid(model),pch = 20,  cex.main=1,cex.lab=1,xlab = "Fitted", ylab = "Residuals", main=title)
abline(h = 0, lty = 2, lwd = 2)
qqnorm(resid(obs_mod), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(obs_mod), col = "dodgerblue", lwd = 2)
hist(resid(obs_mod),
xlab   = "Residuals",
main   = "Histogram of Residuals",
col    = "darkorange",
border = "dodgerblue",
breaks = 20)
}
mod_performance=function(obs_mod,obs_tst,obs_trn){
smry=summary(obs_mod)
#Train RMSE
trn_rmse=sqrt(mean(resid(obs_mod)^2))
pred=predict(obs_mod,newdata=obs_tst)
#Train RMSE
tst_rmse=sqrt(mean((obs_tst$Weight-pred)^2))
list(r2=smry$r.squared
,adjr2=smry$adj.r.squared,
trn_rmse=trn_rmse,tst_rmse=tst_rmse,
bptest=bptest(obs_mod)$p.value
,sptest=shapiro.test(resid(obs_mod))$p.value)
}
set.seed(04082021)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(obesity))
## set the seed to make your partition reproducible
trn_ind <- sample(seq_len(nrow(obesity)), size = smp_size)
obs_trn <- obesity[trn_ind, ]
obs_test <- obesity[-trn_ind, ]
obs_mod=lm(Weight~.,data=obs_trn)
summary(obs_mod)
plot_diagnostics(obs_mod)
perf_mat=mod_performance(obs_mod,obs_tst = obs_test,obs_trn)
kable(data.frame(perf))
plot_diagnostics(obs_mod)
perf_mat=mod_performance(obs_mod,obs_tst = obs_test,obs_trn)
kable(data.frame(perf_mat))
sum(cooks.distance(obs_mod)>4/nrow(obs_mod))
library(lmtest)
bptest(obs_mod)
htval=hatvalues(obs_mod)
obs_trn_subset=obs_trn[htval < 2 * mean(htval),]
obs_mod1=lm(Weight~.,data=obs_trn,subset =obs_trn_subset )
htval=hatvalues(obs_mod)
obs_trn_subset=obs_trn[(htval < 2 * mean(htval)),]
obs_mod1=lm(Weight~.,data=obs_trn,subset =obs_trn_subset )
htval=hatvalues(obs_mod)
obs_trn_subset=obs_trn[(htval < 2 * mean(htval)),]
obs_mod1=lm(Weight~.,data=obs_trn )
plot_diagnostics(obs_mod1,obs_test,obs_trn_subset)
plot_diagnostics=function (model){
par(mfrow = c(2, 2))
title=paste("Data from model: \n",summary(model)$call[2], summary(model)$call[3])
plot(fitted(model), resid(model),pch = 20,  cex.main=1,cex.lab=1,xlab = "Fitted", ylab = "Residuals", main=title)
abline(h = 0, lty = 2, lwd = 2)
qqnorm(resid(obs_mod), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(obs_mod), col = "dodgerblue", lwd = 2)
hist(resid(obs_mod),
xlab   = "Residuals",
main   = "Histogram of Residuals",
col    = "darkorange",
border = "dodgerblue",
breaks = 20)
}
mod_performance=function(obs_mod,obs_tst){
smry=summary(obs_mod)
#Train RMSE
trn_rmse=sqrt(mean(resid(obs_mod)^2))
pred=predict(obs_mod,newdata=obs_tst)
#Train RMSE
tst_rmse=sqrt(mean((obs_tst$Weight-pred)^2))
list(r2=smry$r.squared
,adjr2=smry$adj.r.squared,
trn_rmse=trn_rmse,tst_rmse=tst_rmse,
bptest=bptest(obs_mod)$p.value
,sptest=shapiro.test(resid(obs_mod))$p.value)
}
plot_diagnostics(obs_mod)
perf_mat=mod_performance(obs_mod,obs_tst = obs_test)
kable(data.frame(perf_mat))
htval=hatvalues(obs_mod)
obs_trn_subset=obs_trn[(htval < 2 * mean(htval)),]
obs_mod1=lm(Weight~.,data=obs_trn )
plot_diagnostics(obs_mod1,obs_test,obs_trn_subset)
htval=hatvalues(obs_mod)
obs_trn_subset=obs_trn[(htval < 2 * mean(htval)),]
obs_mod1=lm(Weight~.,data=obs_trn )
plot_diagnostics(obs_mod1,obs_test)
htval=hatvalues(obs_mod)
obs_trn_subset=obs_trn[(htval < 2 * mean(htval)),]
obs_mod1=lm(Weight~.,data=obs_trn )
plot_diagnostics(obs_mod1)
mod_performance(obs_mod1,obs_tst)
htval=hatvalues(obs_mod)
obs_trn_subset=obs_trn[(htval < 2 * mean(htval)),]
obs_mod1=lm(Weight~.,data=obs_trn )
plot_diagnostics(obs_mod1)
mod_performance(obs_mod1,obs_tst=obs_test)
htval=hatvalues(obs_mod)
obs_trn_subset=obs_trn[(htval < 2 * mean(htval)),]
obs_mod1=lm(Weight~.,data=obs_trn_subset )
plot_diagnostics(obs_mod1)
mod_performance(obs_mod1,obs_tst=obs_test)
obs_mod
library(caret)
model <- train(
Weight ~ ., obs_trn,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = FALSE
)
)
mod_performance(model,obs_test)
library(caret)
model <- train(
Weight ~ ., obs_trn,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = FALSE
)
)
mod_performance(model,obs_test,obs_trn)
library(caret)
model <- train(
Weight ~ ., obs_trn,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = FALSE
)
)
mod_performance(model,obs_test)
library(caret)
model <- train(
Weight ~ ., obs_trn,
method = "lm",
trControl = trainControl(
method = "cv", number = 10,
verboseIter = FALSE
)
)
plot_diagnostics(model,obs_test)
plot_diagnostics(model)
View(obesity)
set.seed(04082021)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(obesity))
## set the seed to make your partition reproducible
trn_ind <- sample(seq_len(nrow(obesity)), size = smp_size)
obs_trn <- obesity[trn_ind, ]
obs_test <- obesity[-trn_ind, ]
obs_mod=lm(Weight~.-nobsdad,data=obs_trn)
set.seed(04082021)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(obesity))
## set the seed to make your partition reproducible
trn_ind <- sample(seq_len(nrow(obesity)), size = smp_size)
obs_trn <- obesity[trn_ind, ]
obs_test <- obesity[-trn_ind, ]
obs_mod=lm(Weight~.-Nobsdad,data=obs_trn)
set.seed(04082021)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(obesity))
## set the seed to make your partition reproducible
trn_ind <- sample(seq_len(nrow(obesity)), size = smp_size)
obs_trn <- obesity[trn_ind, ]
obs_test <- obesity[-trn_ind, ]
obs_mod=lm(Weight~.-NObsdad,data=obs_trn)
set.seed(04082021)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(obesity))
## set the seed to make your partition reproducible
trn_ind <- sample(seq_len(nrow(obesity)), size = smp_size)
obs_trn <- obesity[trn_ind, ]
obs_test <- obesity[-trn_ind, ]
obs_mod=lm(Weight~.-NObeysdad,data=obs_trn)
set.seed(04082021)
## 75% of the sample size
smp_size <- floor(0.75 * nrow(obesity))
## set the seed to make your partition reproducible
trn_ind <- sample(seq_len(nrow(obesity)), size = smp_size)
obs_trn <- obesity[trn_ind, ]
obs_test <- obesity[-trn_ind, ]
obs_mod=lm(Weight~.-NObeyesdad,data=obs_trn)
summary(obs_mod)
plot_diagnostics(obs_mod)
perf_mat=mod_performance(obs_mod,obs_tst = obs_test)
kable(data.frame(perf_mat))
obs_mod
obs_mod_full=lm(formula = Weight ~ (. - NObeyesdad)^2, data = obs_trn)
obs_mod_full=lm(formula = Weight ~ (. - NObeyesdad)^2, data = obs_trn)
anova(obs_mod,obs_mod_full)
summary(obs_mod_full)
plot_diagnostics(obs_mod_full)
plot_diagnostics(obs_mod_full)
mod_performance(obs_mod_full)
plot_diagnostics(obs_mod_full)
mod_performance(obs_mod_full,obs_test)
summary(obs_mod_full)$coefficients
summary(obs_mod_full)
plot_diagnostics(obs_mod_full)
perf_mat=mod_performance(obs_mod_full,obs_tst = obs_test)
kable(data.frame(perf_mat))
perf_mat=mod_performance(obs_mod_full,obs_tst = obs_test)
